import toastr from "toastr";
import Raven from "raven-js";

/**
 * NOTE:
 * internalizing the usage here until another approach
 * to providing notification/acknowledgement (instead
 * of using the *standard*  NotificationController
 * component).
 */
function acknowledge(msg, title) {
    let toastrDefaults = {
        closeButton: false,
        debug: false,
        newestOnTop: false,
        progressBar: false,
        positionClass: "toast-bottom-right",
        preventDuplicates: false,
        onclick: null,
        showDuration: "260",
        hideDuration: "1000",
        timeOut: "1125",
        extendedTimeOut: "650",
        showEasing: "swing",
        hideEasing: "linear",
        showMethod: "fadeIn",
        hideMethod: "fadeOut"
    };

    toastr.info(msg, title, toastrDefaults);
}

/**
 * Report exception via Sentry error client (Raven)
 *
 * @param ex - Exception to report to Sentry backend
 *
 * We want to ensure that we can gain some knowledge into the usage of
 * this feature and the availability of the Clipboard API in the wild.
 *
 * It is highly likely that it is available, but we would like to know
 * where it is *not* available to assist in helping those community
 * members on a newer browerser
 */
function reportException(ex) {
    // take Mulder's advice - trustno1
    if (Raven && Raven.isSetup()) {
        if (Raven.captureException) {
            Raven.captureException(ex);
        }
    }
}

const hasClipboardAPI = () => {
    let result = false;

    try {
        result =
            document.queryCommandSupported &&
            document.queryCommandSupported("copy");
    } catch (e) {
        reportException(e);
    }
    return result;
};

/**
 * Safely copies the contents of `element` argument to the clipboard.
 *
 * Uses approach seen in clipboard.js and copy-to-clipboard. Not all
 * elements will have a `select()` method, so it uses the range &
 * selection objects from `document` to achieve the text copy.
 *
 * @param element - DOM node to copy
 */
const copyElement = (element, options) => {
    let copied = false;
    if (hasClipboardAPI()) {
        let range = document.createRange(),
            selection = document.getSelection();

        try {
            // avoid potential 'Discontiguous selection is not supported'
            // error that is generated by an existing selection followed
            // by the "addRange" call below
            selection.removeAllRanges();

            // done for "non"-textarea or textfield elements
            // - text DOM elements will have a `select()` method
            range.selectNode(element);
            selection.addRange(range);

            // this call the largest candidate for creating
            // an error to catch - we could slim it down
            // to just this call
            copied = document.execCommand("copy");
            if (copied && options) {
                if (options.acknowledge) {
                    acknowledge(
                        "Text has been copied to the clipboard",
                        "Copied ... "
                    );
                }
            }
            // clean up selections ...
            selection.removeAllRanges();
        } catch (e) {
            reportException(e);
        }
    }

    return copied;
};

export {copyElement, hasClipboardAPI};
